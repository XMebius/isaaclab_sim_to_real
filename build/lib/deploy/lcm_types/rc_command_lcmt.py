"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class rc_command_lcmt(object):
    __slots__ = ["mode", "left_stick", "right_stick", "R2", "R1", "L1", "L2"]

    __typenames__ = ["int16_t", "float", "float", "int16_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, [2], [2], None, None, None, None]

    def __init__(self):
        self.mode = 0
        self.left_stick = [ 0.0 for dim0 in range(2) ]
        self.right_stick = [ 0.0 for dim0 in range(2) ]
        self.R2 = 0
        self.R1 = 0
        self.L1 = 0
        self.L2 = 0

    def encode(self):
        buf = BytesIO()
        buf.write(rc_command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.mode))
        buf.write(struct.pack('>2f', *self.left_stick[:2]))
        buf.write(struct.pack('>2f', *self.right_stick[:2]))
        buf.write(struct.pack(">hhhh", self.R2, self.R1, self.L1, self.L2))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rc_command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rc_command_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rc_command_lcmt()
        self.mode = struct.unpack(">h", buf.read(2))[0]
        self.left_stick = struct.unpack('>2f', buf.read(8))
        self.right_stick = struct.unpack('>2f', buf.read(8))
        self.R2, self.R1, self.L1, self.L2 = struct.unpack(">hhhh", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if rc_command_lcmt in parents: return 0
        tmphash = (0x1490de8052c7213a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rc_command_lcmt._packed_fingerprint is None:
            rc_command_lcmt._packed_fingerprint = struct.pack(">Q", rc_command_lcmt._get_hash_recursive([]))
        return rc_command_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", rc_command_lcmt._get_packed_fingerprint())[0]

